{"version":3,"file":"functions.js","mappings":"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","sources":["webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/./src/functions/functions.js","webpack://excel-custom-functions-js/webpack/runtime/define property getters","webpack://excel-custom-functions-js/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/* global clearInterval, console, setInterval */\n\n/**\n * Add two numbers\n * @customfunction\n * @param {number} first First number\n * @param {number} second Second number\n * @returns {number} The sum of the two numbers.\n */\nexport function add(first, second) {\n  return first + second;\n}\n\n/**\n * Displays the current time once a second\n * @customfunction\n * @param {CustomFunctions.StreamingInvocation<string>} invocation Custom function invocation\n */\nexport function clock(invocation) {\n  const timer = setInterval(() => {\n    const time = currentTime();\n    invocation.setResult(time);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Returns the current time\n * @returns {string} String with the current time formatted for the current locale.\n */\nexport function currentTime() {\n  return new Date().toLocaleTimeString();\n}\n\n/**\n * Increments a value once a second.\n * @customfunction\n * @param {number} incrementBy Amount to increment\n * @param {CustomFunctions.StreamingInvocation<number>} invocation\n */\nexport function increment(incrementBy, invocation) {\n  let result = 0;\n  const timer = setInterval(() => {\n    result += incrementBy;\n    invocation.setResult(result);\n  }, 1000 * 10);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param {string} message String to write.\n * @returns String to write.\n */\nexport function logMessage(message) {\n  console.log(message);\n\n  return message;\n}\n\n// Write my own functions starting here\n\n/**\n * Return random int - 10\n * @customfunction\n * @returns {number} Return random int - 10.\n */\nfunction returnInt() {\n  var timestamp = new Date().toISOString();\n  console.log(`[${timestamp}] `, 'Call returnInt.');\n  return Math.floor(Math.random() * 10);\n}\n\n/**\n * Return random int - 100\n * @customfunction\n * @returns {number} Return random int - 100.\n */\nfunction returnIntPromise() {\n  var timestamp = new Date().toISOString();\n  console.log(`[${timestamp}] `, 'Call returnIntPromise.');\n  return new Promise(function (resolve) {\n      setTimeout(function () {\n          resolve(Math.floor(Math.random() * 100));\n      }, 1000);\n  });\n}\n\n/**\n * Return 42\n * @customfunction\n * @returns {number} Return 42.\n */\nfunction return42Promise() {\n  var timestamp = new Date().toISOString();\n  console.log(`[${timestamp}] `, 'Call return42Promise.');\n  return new Promise(function (resolve) {\n      setTimeout(function () {\n          resolve(42);\n      }, 1000);\n  });\n}\n\n/**\n * Return random int - 1000\n * @customfunction\n * @volatile\n * @returns {number} Return random int - 1000.\n */\nfunction returnIntVolatile() {\n  var timestamp = new Date().toISOString();\n  console.log(`[${timestamp}] `, 'Call returnIntVolatile.');\n  return Math.floor(Math.random() * 1000)\n}\n\n/**\n * Return 42\n * @customfunction\n * @volatile\n * @returns {number} Return 42.\n */\nfunction return42Volatile() {\n  var timestamp = new Date().toISOString();\n  console.log(`[${timestamp}] `, 'Call return42Volatile.');\n  return 42;\n}\n\n/**\n * Return current time\n * @customfunction\n * @volatile\n * @returns {string} Return current time.\n */\nfunction returnStringVolatile() {\n  var timestamp = new Date().toISOString();\n  console.log(`[${timestamp}] `, 'Call returnStringVolatile.');\n  return currentTime();\n}\n\n/**\n * Return current time\n * @customfunction\n * @param {CustomFunctions.StreamingInvocation<number>} invocation\n */\nexport function returnStringStream5m(invocation) {\n  let result = currentTime();\n  invocation.setResult(result);\n  var timestamp = new Date().toISOString();\n  console.log(`[${timestamp}] `, 'Call returnStringStream5m#1.');\n  const timer = setInterval(() => {\n    //var timestamp = new Date().toISOString();\n    result = currentTime();\n    invocation.setResult(result);\n    console.log(`[${result}] `, 'Call returnStringStream5m#2.');\n  }, 1000 * 60 * 5);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Return current time\n * @customfunction\n * @param {CustomFunctions.StreamingInvocation<number>} invocation\n */\nexport function returnStringStream1s(invocation) {\n  let result = currentTime();\n  invocation.setResult(result);\n  var timestamp = new Date().toISOString();\n  console.log(`[${timestamp}] `, 'Call returnStringStream1s#1.');\n  const timer = setInterval(() => {\n    //var timestamp = new Date().toISOString();\n    result = currentTime();\n    invocation.setResult(result);\n    console.log(`[${result}] `, 'Call returnStringStream1s#2.');\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Return current time\n * @customfunction\n * @param {CustomFunctions.StreamingInvocation<number>} invocation\n */\nexport function returnTestStringStream1s(invocation) {\n  let currentTime = currentTime();\n  invocation.setResult(123);\n  var timestamp = new Date().toISOString();\n  console.log(`[${timestamp}] `, 'Call returnTestStringStream1s#1.');\n  const timer = setInterval(() => {\n    var timestamp = new Date().toISOString();\n    result = 123;\n    invocation.setResult(result);\n    console.log(`[${timestamp}] `, 'Call returnTestStringStream1s#2.');\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Return current time\n * @customfunction\n * @returns {string[][]} Return current time.\n */\nexport function returnStringDynamicArray() {\n  var timestamp = new Date().toISOString();\n  console.log(`[${timestamp}] `, 'Call returnStringDynamicArray.');\n  return [[currentTime(), currentTime(), currentTime()]];\n}\n\n/**\n * Return test strings\n * @customfunction\n * @returns {string[][]} Return test strings.\n */\nexport function returnStringTestDynamicArray() {\n  var timestamp = new Date().toISOString();\n  console.log(`[${timestamp}] `, 'Call returnStringTestDynamicArray.');\n  return [[\"1\", \"2\", \"3\"]];\n}\n\n/**\n * Return nested range\n * @customfunction\n * @param {string[][]} values Multiple ranges of values.\n * @returns {string} Return nested range.\n */\nexport function returnStringNested(range) {\n  var cell = range[0];\n  var timestamp = new Date().toISOString();\n  console.log(`[${timestamp}] `, 'Call returnStringNested.');\n  return cell;\n}\n\n/**\n * Wait before returning current time\n * @customfunction\n * @returns {string} Return current time.\n */\nexport function returnStringWait() {\n  var timestamp = new Date().toISOString();\n  console.log(`[${timestamp}] `, 'Call returnStringWait.');\n  var num = 0;\n  for (var i = 0; i < 100000000000; i++) {\n    num++;\n  }\n  return timestamp;\n}\n\n/**\n * Wait before returning current time\n * @customfunction\n * @volatile\n * @returns {string} Return current time.\n */\nexport function returnStringWaitVolatile() {\n  var timestamp = new Date().toISOString();\n  console.log(`[${timestamp}]`, 'Call returnStringWaitVolatile.');\n  var num = 0;\n  for (var i = 0; i < 100000000000; i++) {\n    num++;\n  }\n  return timestamp;\n}\n\n/**\n * Take a number as the input value and return a double as the output.\n * @customfunction\n * @returns A formatted number value.\n */\nfunction returnDoubleCellValue(value, format) {\n    return {\n        type: \"Double\",\n        basicValue: 10,\n        numberFormat: \"0.00%\"\n    }\n}\n\n/**\n * Input a string to output\n * @customfunction\n * @returns {string} Return input.\n */\nexport function inputString(str) {\n  var timestamp = new Date().toISOString();\n  console.log(`[${timestamp}]`, 'Call inputString.');\n  return str;\n}\n\n/**\n * @customfunction\n * @param {number} first\n * @param {number} second\n * @param {number} [third]\n * @returns {number}\n */\nfunction inputIntOptional(first, second, third) {\n  if (third === null) third = 0;\n  return first + second + third;\n}\n\n/**\n * @customfunction\n * @param {number[]} values\n * @returns {number}\n */\nfunction inputIntRepeating(values) {\n  const sum = values.reduce((a, b) => a + b, 0);\n  return sum / values.length;\n}\n\n/**\n * Returns the second highest value in a matrixed range of values.\n * @customfunction\n * @param {number[][]} values Multiple ranges of values.\n */\nfunction inputRangeParams(values) {\n  let highest = Number.MIN_SAFE_INTEGER,\n    secondHighest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < values[i].length; j++) {\n      if (values[i][j] >= highest) {\n        secondHighest = highest;\n        highest = values[i][j];\n      } else if (values[i][j] >= secondHighest) {\n        secondHighest = values[i][j];\n      }\n    }\n  }\n  if (secondHighest === Number.MIN_SAFE_INTEGER) {\n    secondHighest = null; // No second highest found\n  }\n  return secondHighest;\n}\n\n/**\n * Return the address of the cell that invoked the custom function. \n * @customfunction\n * @param {number} first First parameter.\n * @param {number} second Second parameter.\n * @param {CustomFunctions.Invocation} invocation Invocation object. \n * @requiresAddress \n */\nfunction intputInvocation(first, second, invocation) {\n  const address = invocation.address;\n  return address;\n}\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"LOG\", logMessage);\nCustomFunctions.associate(\"RETURNINT\", returnInt);\nCustomFunctions.associate(\"RETURNINTPROMISE\", returnIntPromise);\nCustomFunctions.associate(\"RETURN42PROMISE\", return42Promise);\nCustomFunctions.associate(\"RETURNINTVOLATILE\", returnIntVolatile);\nCustomFunctions.associate(\"RETURN42VOLATILE\", return42Volatile);\nCustomFunctions.associate(\"RETURNSTRINGVOLATILE\", returnStringVolatile);\nCustomFunctions.associate(\"RETURNSTRINGSTREAM5M\", returnStringStream5m);\nCustomFunctions.associate(\"RETURNSTRINGSTREAM1S\", returnStringStream1s);\nCustomFunctions.associate(\"RETURNTESTSTRINGSTREAM1S\", returnTestStringStream1s);\nCustomFunctions.associate(\"RETURNSTRINGDYNAMICARRAY\", returnStringDynamicArray);\nCustomFunctions.associate(\"RETURNSTRINGTESTDYNAMICARRAY\", returnStringTestDynamicArray);\nCustomFunctions.associate(\"RETURNSTRINGNESTED\", returnStringNested);\nCustomFunctions.associate(\"RETURNSTRINGWAIT\", returnStringWait);\nCustomFunctions.associate(\"RETURNSTRINGWAITVOLATILE\", returnStringWaitVolatile);\nCustomFunctions.associate(\"RETURNDOUBLECELLVALUE\", returnDoubleCellValue);\nCustomFunctions.associate(\"INPUTSTRING\", inputString);\nCustomFunctions.associate(\"INPUTINTOPTIONAL\", inputIntOptional);\nCustomFunctions.associate(\"INPUTINTREPEATING\", inputIntRepeating);\nCustomFunctions.associate(\"INPUTRANGEPARAMS\", inputRangeParams);\nCustomFunctions.associate(\"INTPUTINVOCATION\", intputInvocation);","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }"],"names":["__webpack_require__","currentTime","Date","toLocaleTimeString","d","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","CustomFunctions","associate","first","second","invocation","timer","setInterval","time","setResult","onCanceled","clearInterval","incrementBy","result","message","console","log","timestamp","toISOString","concat","Math","floor","random","Promise","resolve","setTimeout","range","cell","i","value","format","type","basicValue","numberFormat","str","third","values","reduce","a","b","length","highest","Number","MIN_SAFE_INTEGER","secondHighest","j","address"],"sourceRoot":""}